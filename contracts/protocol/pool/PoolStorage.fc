#include "../../imports/stdlib.fc";

;; Storage variables
global slice stored_user_address;
global int stored_user_amount;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ;; Load stored user address and amount
    stored_user_address = ds~load_ref().begin_parse(); ;; Correctly load a reference and parse it
    stored_user_amount = ds~load_uint(64);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(slice user_address, int user_amount) impure {
    set_data(
        begin_cell()
            .store_ref(begin_cell().store_slice(user_address).end_cell()) ;; Store the user address in a reference
            .store_uint(user_amount, 64) ;; Store the user amount
        .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; Ignore all empty messages
        return ();
    }

    ;; Parse the incoming message
    slice cs = in_msg_full.begin_parse();

    ;; Load the flags (first 4 bits of the header)
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; Ignore all bounced messages
        return ();
    }

    ;; Extract the sender's address from the message header
    slice sender_address = cs~load_msg_addr(); ;; This is the sender's address

    ;; Load the existing data
    load_data();

    ;; Update the total amount by adding the current message's value
    stored_user_amount = stored_user_amount + msg_value;

    ;; Save the updated data
    save_data(sender_address, stored_user_amount);
}

;; Getter method to fetch supply cell data
(cell, slice, int) get_supply() method_id {
    load_data(); ;; Load the stored data into memory

    ;; Return the supply cell and its components
    return (begin_cell()
                .store_ref(begin_cell().store_slice(stored_user_address).end_cell()) ;; Store the user address in a reference
                .store_uint(stored_user_amount, 64)
            .end_cell(), stored_user_address, stored_user_amount);
}
